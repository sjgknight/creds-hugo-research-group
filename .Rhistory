install_hugo(version = "latest", extended = TRUE)
library(blogdown)
install.packages("blogdown")
library(blogdown)
install_hugo(version = "latest", extended = TRUE)
install_hugo(version = "latest", extended = TRUE, force = TRUE)
library(blogdown)
blogdown::check_site()
warnings()
library(pacman)
p_load(rorcid)
usethis::use_git_config()
library(usethis)
use_git_ignore()
?use_git_ignore
gitignore::gi_available_templates()
gitignore::gi_fetch_templates("hugo")
gitignore::gi_fetch_templates("r")
orcid_auth()
usethis::edit_r_profile()
sk_orcid <- "0000-0002-8709-5780"
as.orcid(sk_orcid)
sk_orcid <- "0000-0002-8709-5780"
as.orcid(sk_orcid)
library(pacman)
p_load(rorcid)
as.orcid(sk_orcid)
works(orcid_id(sk_orcid))
View(works(orcid_id(sk_orcid)))
orcid_citations(sk_orcid)
orcid_citations(orcid = sk_orcid)
orcid_citations(orcid = "0000-0002-8709-5780")
(orcid_citations(orcid = "0000-0002-8709-5780"))
(res <- orcid_citations(orcid = "0000-0002-8709-5780"))
orcid_citations(orcid = "0000-0002-9341-7985")
p_load(rcrossref)
orcid_citations(orcid = "0000-0002-9341-7985")
orcid_citations(orcid = sk_orcid)
works(orcid_id(sk_orcid)) %>%
tidyr::unnest(external_ids_external_id) %>%
janitor::clean_names() %>%
View
library(magittr)
p_load(magrittr)
works(orcid_id(sk_orcid)) %>%
tidyr::unnest(external_ids_external_id) %>%
janitor::clean_names() %>%
View
p_load(purrr)
works(orcid_id(sk_orcid)) %>%
tidyr::unnest(external_ids_external_id) %>%
janitor::clean_names() %>%
View
works(orcid_id(sk_orcid)) %>%
tidyr::unnest(external_ids_external_id) %>%
janitor::clean_names() %>%
view
works(orcid_id(sk_orcid)) %>%
tidyr::unnest(external_ids_external_id) %>%
janitor::clean_names()
works(orcid_id(sk_orcid))
p_load(listviewer)
Sys.getenv("orcid_token")
Sys.getenv("ORCID_TOKEN")
usethis::edit_r_environ()
Sys.getenv("ORCID_TOKEN")
roadoi::oadoi_fetch(dois = c("10.1016/j.iheduc.2020.100730", "10.1093/nar/gkr1047"),
email = "najko.jahn@gmail.com")
p_load(roadoi)
library(pacman)
p_load(roadoi)
p_load(roadoi)
roadoi::oadoi_fetch(dois = c("10.1016/j.iheduc.2020.100730", "10.1093/nar/gkr1047"),
email = "najko.jahn@gmail.com")
t <- roadoi::oadoi_fetch(dois = c("10.1016/j.iheduc.2020.100730", "10.1093/nar/gkr1047"),
email = "najko.jahn@gmail.com")
t$oa_locations
t$best_oa_location
View(t$best_oa_location)
View(t)
View(t[[2]][[1]])
View(t[[3]][[1]])
cross_doi <- rcrossref::cr_works(doi$`external-id-value`)
remove.packages(rlang)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
pacman::p_load(openalexR)
library(pacman)
p_load(rorcid)
p_load(tidyverse)
p_load(tidyverse)
p_load(rcrossref)
p_load(listviewer)
orcid_auth()
corcids <- tibble(
name = c("Simon Knight","Mary Coupland","Keith Heggart","Jane Hunter","Matthew Kearney","Kirsty Kitto","Damian Maher","Simon Buckingham Shum","Camille Dickson-Deane","Dilek Cetindamar Kozanoglu","Heather Ford","Amelia Johns","Bhuva Narayan","Tracey-Ann Palmer","Darrall Thompson","Peter Aubusson","John Buchanan","Lori Locker","Kimberley Pressick-Kilborn","Anne Prescott","Sandra Schuck"),
identifier = c("0000-0002-8709-5780","0000-0002-1387-1601","0000-0003-2331-1234","0000-0001-9232-8895","0000-0002-6396-0418","0000-0001-7642-7121","0000-0002-3566-0805","0000-0002-6334-7429","0000-0002-5504-7856","0000-0002-0457-3258","0000-0002-3500-9772","0000-0002-3946-7869","0000-0001-8852-5589","0000-0001-8114-1654","0000-0002-6178-2873","0000-0002-6319-0695","0000-0001-6454-2296","0000-0003-1517-2342","0000-0003-1662-7038","0000-0001-7976-3438","0000-0001-7482-0480")
)
#my_orcids <- c("0000-0002-1825-0097", "0000-0002-9260-8456", "0000-0002-2771-9344")
my_works <- rorcid::orcid_works(corcids$identifier)
listviewer::jsonedit(my_works, mode = "view")
my_works_data <- my_works %>%
purrr::map_dfr(pluck, "works") %>%
janitor::clean_names() %>%
dplyr::mutate(created_date_value = anytime::anydate(created_date_value/1000))
my_works_data <- my_works_data %>%
mutate(
orcid = unlist(map2(names(my_works), map(my_works, function(x) {nrow(x[[1]])}), rep))
)
my_works_data
#This flattens external IDs but keeps ones without any external ID
my_works_externalIDs_keep <- my_works_data %>%
dplyr::filter(!purrr::map_lgl(external_ids_external_id, purrr::is_empty)) %>%
tidyr::unnest(external_ids_external_id, .drop = TRUE) %>%
dplyr::bind_rows(my_works_data %>%
dplyr::filter(map_lgl(external_ids_external_id, is.null)) %>%
dplyr::select(-external_ids_external_id))
my_works_externalIDs_keep
p_load(scholar)
library(pacman)
p_load(scholar)
pacman::p_load(openxlsx)
openxlsx::read.xlsx("c:/users/125295_admin/downloads/iYarn_Resource_Mapping_sk_test.xlsx", fillMergedCells = TRUE)
openxlsx::read.xlsx("c:/Users/125295_admin/Downloads/iYarn_Resource_Mapping_sk_test.xlsx", fillMergedCells = TRUE)
openxlsx::read.xlsx("C:/Users/125295_admin/Downloads/iYarn_Resource_Mapping_sk_test.xlsx", fillMergedCells = TRUE)
openxlsx::read.xlsx("C:\\Users\\125295_admin\\Downloads\\iYarn_Resource_Mapping_sk_test.xlsx", fillMergedCells = TRUE)
read.xlsx
openxlsx::read.xlsx("C:\\Users\\125295_admin\\Downloads\\iYarn_ Resource_Mapping_sk_test.xlsx", fillMergedCells = TRUE)
iy <- openxlsx::read.xlsx("C:\\Users\\125295_admin\\Downloads\\iYarn_ Resource_Mapping_sk_test.xlsx", fillMergedCells = TRUE)
View(corcids)
View(iy)
View(iy)
pacman::p_load(openalexR)
query_auth <- oa_query(identifier = corcids$identifier, verbose = TRUE)
pacman::p_load(openalexR)
query_auth <- oa_query(identifier = corcids$identifier, verbose = TRUE)
query_auth <- openalexR::oaQueryBuild(identifier = corcids$identifier, verbose = TRUE)
openalexR::oaApiRequest(query_auth)
query_auth <- sapply(corcids$identifier, function(x) {
openalexR::oaQueryBuild(identifier = x, verbose = TRUE)
})
outputs <- sapply(query_auth, function(x) {
openalexR::oaApiRequest(x)})
oa_fetch(
entity = "authors",
orcid = corcids$identifier
) %>%
show_authors() %>%
knitr::kable()
oa_fetch(
entity = "authors",
orcid = corcids$identifier
)
pacman::p_load_current_gh("massimoaria/openalexR")
pacman::p_load_current_gh("massimoaria/openalexR")
get_people <- oa_fetch(
entity = "authors",
orcid = corcids$identifier
) %>%
show_authors() %>%
knitr::kable()
library(tidyverse)
get_people <- oa_fetch(
entity = "authors",
orcid = corcids$identifier
) %>%
show_authors() %>%
knitr::kable()
get_people
corcids$identifier
oa_fetch(
entity = "authors",
orcid = corcids$identifier
) %>%
show_authors() %>%
knitr::kable()
get_people <- oa_fetch(
entity = "authors",
orcid = corcids$identifier
) %>%
show_authors()
View(get_people)
oa_fetch(
entity = "authors",
orcid = "0000-0002-8709-5780"
)
get_people <- oa_fetch(
entity = "authors",
orcid = corcids$identifier
)
get_people
View(get_people)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
#no joke...
#pacman::p_load_gh("ekmaloney/openalexR")
devtools::source_url("https://github.com/ekmaloney/openalexR/blob/master/R/get_authors_papers.R")
#no joke...
#pacman::p_load_gh("ekmaloney/openalexR")
devtools::source_url("https://github.com/ekmaloney/openalexR/blob/master/R/get_authors_papers.R")
#' Get Authors Papers
#'
#' @param id_type the type of id you are using to locate the author: must be either orcid
#' or openalex
#' @param id the id for the author that matches the type selected initially
#'
#' @return dataframe with all papers from that author, includes variables:
#' id: openalex id of the paper
#' display_name: title of the paper
#' publication date: date of publication in YYYY-MM-DD form
#' relevance score: ?Not sure what this is, all NA for me atm
#' authorships: nested dataframe of all authors in the paper (includes author.id,
#' author_position, author.display_name, and author.orcid)
#' concepts: nested dataframe of the concepts associated with the paper (includes openalex's
#' id of the concept, display.name of the concept, score of the concept, level of the
#' concept in the concept hierarchy, and wikidata of the concept)
#' alternate_host_venues: ?Not sure what this is either, will need to check on openalex's page
#' cited_by_count: number of other papers that have cited the paper
#' publication_year: int
#' cited_by_api_url: openalex api url for the papers that have cited this paper
#' doi: doi of the paper
#' type: type of paper (e.g. proceedings-article, journal-article, book-chapter,
#' posted-content)
#' is_paratext: ?Not sure what this is either, will need to check on openalex's page
#' is_retracted: TRUE/FALSE whether paper has been retracted
#' referenced_works: list of all works referenced in paper (with openalex urls :) )
#' related_works: similar works? not sure how these are found
#'
#' @export
#'
#' @examples get_authors_papers(id_type = "openalex", id = "A2941293769")
get_authors_papers <- function(id_type = c("orcid", "openalex",
"scopus", "mag"),
id){
#construct path specific to the author
author_path <- dplyr::case_when(id_type == "orcid" ~ paste0("author.orcid:", id),
id_type == "openalex" ~ paste0("author.id:", id))
#paste that to the rest of the url
entire_path <- paste0("https://api.openalex.org/works?filter=", author_path)
#get the total number of pages with their info
all_links <- get_links_for_each_page(page1_path = entire_path)
#get data
res <- purrr::map(all_links, openalex_api)
res_df <- purrr::map_df(res, clean_all_author_results)
return(res_df)
}
clean_all_author_results <- function(res_list){
res_df <- tibble::tibble(id = res_list[["results"]][["id"]],
doi = res_list[["results"]][["ids"]][["doi"]],
mag = res_list[["results"]][["ids"]][["mag"]],
openalex = res_list[["results"]][["ids"]][["openalex"]],
pmid = res_list[["results"]][["ids"]][["pmid"]],
title = res_list[["results"]][["display_name"]],
publication_date = res_list[["results"]][["publication_date"]],
relevance_score = res_list[["results"]][["relevance_score"]],
host_venue_id = res_list[["results"]][["host_venue"]][["id"]],
host_venue_name = res_list[["results"]][["host_venue"]][["display_name"]],
host_venue_publisher = res_list[["results"]][["host_venue"]][["publisher"]],
host_venue_issn = res_list[["results"]][["host_venue"]][["issn"]],
host_venue_iss_l = res_list[["results"]][["host_venue"]][["issn_l"]],
host_venue_type = res_list[["results"]][["host_venue"]][["type"]],
host_venue_url = res_list[["results"]][["host_venue"]][["url"]],
host_venue_oa = res_list[["results"]][["host_venue"]][["is_oa"]],
host_venue_version = res_list[["results"]][["host_venue"]][["version"]],
host_venue_license = res_list[["results"]][["host_venue"]][["license"]],
authorships = res_list[["results"]][["authorships"]],
concepts = res_list[["results"]][["concepts"]],
alternate_host_venues = res_list[["results"]][["alternate_host_venues"]],
cited_by_count = res_list[["results"]][["cited_by_count"]],
publication_year = res_list[["results"]][["publication_year"]],
cited_by_url = res_list[["results"]][["cited_by_api_url"]],
type = res_list[["results"]][["type"]],
paratext = res_list[["results"]][["is_paratext"]],
retracted = res_list[["results"]][["is_retracted"]],
referenced_works = res_list[["results"]][["referenced_works"]],
related_works = res_list[["results"]][["related_works"]])
return(res_df)
}
unnest_authorship <- function(authorships_list){
institutions_flattened <- purrr::flatten(authorships_list$institutions)
authorships_tibble <- tibble::tibble(author_id = authorships_list$author$id,
author_name = authorships_list$author$display_name,
author_orcid = authorships_list$author$orcid,
institution_id = institutions_flattened[["id"]],
institution_name = institutions_flattened[["display_name"]],
institution_ror = institutions_flattened[["ror"]],
institution_country_code = institutions_flattened[["country_code"]],
institution_type = institutions_flattened[["type"]],
author_position = authorships_list$author_position,
author_raw_affiliation = authorships_list$raw_affiliation_string)
return(authorships_tibble)
}
get_people$id[1]
get_authors_papers(id_type = "openalex", get_people$id[1])
#' Get links for each page
#'
#' @param page1_path the url of the first page of results
#'
#' @return the links to request
#' @export
#'
#' @examples
get_links_for_each_page <- function(page1_path){
author_papers <- purrr::map(page1_path, openalex_api)
n_pages <- purrr::map(author_papers, get_number_of_pages)
all_links <- purrr::map2(page1_path, n_pages, construct_links)
all_links <- unlist(all_links)
return(all_links)
}
#' Construct Links
#'
#' @param path
#' @param n_page
#'
#' @return
#' @export
#'
#' @examples
construct_links <- function(path, n_page){
links <- tibble::tibble(path = path,
n_page = seq(from = 1, to = n_page, by = 1),
url = paste0(path, "&page=", n_page))
return(links$url)
}
#' Get Number of Pages
#'
#' @param author_papers
#'
#' @return
#' @export
#'
#' @examples
get_number_of_pages <- function(author_papers){
n_page <- ceiling(author_papers$meta$count/25)
return(n_page)
}
#' Get Data from Page
#'
#' Convenience function to get the data from each page -- only pulling out the
#' results
#'
#' @param page_path the url for the page of API results
#'
#' @return df with results from that page
#' @export
#'
#' @examples get_data_from_page("https://api.openalex.org/concepts?filter=level:1")
get_data_from_page <- function(page_path){
page_results <- openalex_api(page_path)$results
return(page_results)
}
#' Get all data for Query
#'
#' Queries the openalex api for the data matching your query
#'
#' @param base_page_path the string corresponding to the API query
#' @param number_of_pages total number of pages of results retured by the API query
#'
#' @return dataframe of results matching your query
#' @export
#'
#' @examples
get_all_data_for_query <- function(base_page_path, number_of_pages){
#make df of the paths
urls <- data.frame(page_number = seq(from = 1, to = number_of_pages, by = 1)) %>%
dplyr::mutate(url = paste0(base_page_path, "&page=", page_number))
#apply function to each row of the df
res <- urls$url %>% purrr::map_df(get_data_from_page)
return(res)
}
get_authors_papers(id_type = "openalex", get_people$id[1])
#' openalex_api
#'
#' Baseline function for calling the API and parsing results
#'
#' @param path the url path to use in the GET request to the openalex API
#'
#' @return list of parsed JSON returned from the API
#' @export
#'
#' @examples openalex_api(path = "https://api.openalex.org/works/W2741809807")
openalex_api <- function(path){
resp <- httr::GET(path)
if(resp$status_code == 404){
stop(print(httr::content(resp, "text", encoding = "UTF-8")))
}
#checking that we are getting JSON
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"))
#indicating to user if there's an issue with the API request
if (httr::http_error(resp)) {
stop(
sprintf(
"OpenAlex API request failed [%s]\n%s\n<%s>",
httr::status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
if(stringr::str_detect(path, "author.id")){
if(parsed$meta$count == 0){
stop(
sprintf(
"No records were found in the OpenAlex Database matching that author id."
)
)
}
}
return(parsed)
}
get_authors_papers(id_type = "openalex", get_people$id[1])
#no joke...
pacman::p_load_gh("ekmaloney/openalexR")
pacman::p_load_current_gh("massimoaria/openalexR")
rm(get_authors_papers)
get_authors_papers(id_type = "openalex", get_people$id[1])
#no joke...
remotes::install_github("ekmaloney/openalexR")
#no joke...
#remotes::install_github("ekmaloney/openalexR")
pacman::p_load_gh("ekmaloney/openalexR")
#no joke...
remotes::install_github("ekmaloney/openalexR")
pacman::p_load_current_gh("massimoaria/openalexR")
pacman::p_load_current_gh("massimoaria/openalexR")
get_people <- oa_fetch(
entity = "authors",
orcid = corcids$identifier
)
#no joke...
#remotes::install_github("ekmaloney/openalexR")
#to make this work I have changed the DESCRIPTION package title to openalexRR
library(openalexRR)
library(openalexRR)
install.packages("C:/Users/125295_admin/Downloads/openalexR-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/125295_admin/Downloads/openalexR-master/openalexR-master.zip", repos = NULL, type = "win.binary")
#no joke...
#remotes::install_github("ekmaloney/openalexR")
#to make this work I have changed the DESCRIPTION package title to openalexRR
library(openalexRR)
library(openalexR-master)
library("openalexR-master")
#no joke...
#remotes::install_github("ekmaloney/openalexR")
#to make this work I have changed the DESCRIPTION package title to openalexRR
library("openalexRR")
library("openalexRR")
library(openalexRR)
install.packages("C:/Users/125295_admin/Downloads/openalexR-master/openalexRR.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/125295_admin/Downloads/openalexRR/openalexRR.zip", repos = NULL, type = "win.binary")
library(openalexRR)
openalexRR::get_authors_papers(id_type = "openalex", get_people$id[1])
#no joke...
dev_mode()
#no joke...
devtools::dev_mode()
remotes::install_github("ekmaloney/openalexR")
devtools::dev_mode()
#no joke...
devtools::dev_mode()
devtools::dev_mode()
